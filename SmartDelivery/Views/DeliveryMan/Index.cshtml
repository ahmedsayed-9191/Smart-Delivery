@model IEnumerable<SmartDelivery.Models.DeliveryRequest>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_deliverymanLayout.cshtml";
}

<h2 class="text-center">Delievry Requests</h2>

@foreach (var item in Model) { 
<div class="col-sm-6 col-sm-offset-3 col-xs-10 col-xs-offset-1 purchase-card">
    <div class="col-xs-6 col-xs-offset-3 request-description">
        @Html.DisplayFor(modelItem => item.ShipmentDescription)
    </div>
    <div class="col-xs-10 col-xs-offset-1 purchase-details">
        <div class="col-xs-12">
            <label class="col-xs-6">@Html.DisplayNameFor(model => model.PaymentStatu.PaymentStatus)</label>
            <span class="col-xs-6"> @Html.DisplayFor(modelItem => item.PaymentStatu.PaymentStatus)</span>
        </div>
        <div class="col-xs-12">
            <label class="col-xs-6">@Html.DisplayNameFor(model => model.Cost)</label>
            <span class="col-xs-6"> @Html.DisplayFor(modelItem => item.Cost)</span>
        </div>
        <div class="col-xs-12">
            <label class="col-xs-6">@Html.DisplayNameFor(model => model.RequestStatu.RequestStatus)</label>
            <span class="col-xs-6">@Html.DisplayFor(modelItem => item.RequestStatu.RequestStatus)</span>
        </div>
        <div class="col-xs-12">
            <label class="col-xs-6">@Html.DisplayNameFor(model => model.ShipmentType.Type)</label>
            <span class="col-xs-6">@Html.DisplayFor(modelItem => item.ShipmentType.Type)</span>
        </div>
    </div>
    <div class="col-xs-12 purchase-control">
        <a class="styled_link" data-toggle="modal" data-target="#exampleModalCenter" onclick="setMap(this)" data-assigned-id="@item.ID">Shipment Path</a>

        <button data-toggle="modal" data-target="#ModalCenter"
                type="button" class="btn-link styled_link"
                onclick="viewConfirmation('@item.ID','@item.ShipmentDescription','@item.PaymentStatu.PaymentStatus')">
            Verify Reciever
        </button>
        <a class="tip" href="@Url.Action("Chat", new { id = item.CustomerID, usertype = 4 } ) " target="_blank">
            <i class="fa fa-envelope fa-2x"></i>
            <span class="tooltiptext">Chat with Customer</span>
        </a>
        <a class="tip" href="@Url.Action("Chat", new { id = item.SupervisorID, usertype = 2 })" target="_blank">
            <i class="fa fa-envelope fa-2x"></i>
            <span class="tooltiptext">Chat with Supervisor</span>
        </a>
    </div>
</div>
}

@*<table class="table">
    <tr>
        <th class="to_be_hidden">
            
        </th>

        <th class="to_be_hidden">
           
        </th>
        <th>
                @Html.DisplayNameFor(model => model.Destination)
            </th>
        <th>
               
            </th>

            <th>
                @Html.DisplayNameFor(model => model.CurrentLocation)
            </th>
        <th class="to_be_hidden_">
            
        </th>
        <th>
            
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td class="to_be_hidden">
               
            </td>
            <td class="to_be_hidden">
               
            </td>
            <td>
                    @Html.DisplayFor(modelItem => item.Destination)
                </td>
            <td>
                   
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CurrentLocation)
                </td>
            <td class="to_be_hidden">
                
            </td>
            <td>
                
            </td>
            <td>



            </td>
        </tr>
    }

</table>*@
<!-- Track Modal -->
<div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h5 class="modal-title" id="exampleModalLongTitle">Shipment Path</h5>

            </div>
            <div class="modal-body">
                <div id="popupWindow" style="display:none">
                    <div id="tracked_map" style="display:none; height:300px; width:300px ; margin:0 auto"></div>
                    <br><br>
                    <div class="form-group">
                        <label class="control-label col-md-5">My Current Location</label>
                        <div class="col-md-5">
                            <input id="_currentLocation" , class="form-control" readonly />
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-5">Expected Delivery Time</label>
                        <div class="col-md-5">
                            <input type="text" id="__deliveryTime" class="form-control" readonly />
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-5">Remaining Distance</label>
                        <div class="col-md-5">
                            <input type="text" id="_calculatedDistance" class="form-control" readonly />
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn" data-dismiss="modal">Close</button>
                @*<button type="button" class="">Save changes</button>*@
            </div>
        </div>
    </div>
</div>

<!------------------------>
<div class="modal fade" id="ModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h5 class="modal-title" id="exampleModalLongTitle">Shipment Path</h5>
            </div>
            <div class="modal-body">
                <div id="confirm_" @*style="display:none"*@>
                    <div class="form-group">
                        <label class="control-label col-md-5">Shipment Description</label>
                        <div class="col-md-5">
                            <input type="text" id="Description_" class="form-control" readonly />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-5">Paid</label>
                        <div class="col-md-5">
                            <input id="Paid_" , class="form-control" readonly />
                        </div>
                    </div>
                    @using (Html.BeginForm("conFirmRecieving", "DeliveryMan", FormMethod.Post))
            {
                        <div class="form-group" style="display:none">
                            <label class="control-label col-md-5">Confirmation Code</label>
                            <div class="col-md-5">
                                <input id="id_" name="id" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-5">Confirmation Code</label>
                            <div class="col-md-5">
                                <input id="Code_" name="code" class="form-control" placeholder="Enter Confirmation Code here." />
                            </div>
                        </div>
                        <input type="submit" value="Confirm Code" id="buttConfirm" class="btn">
                    }

                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn" data-dismiss="modal">Close</button>
                @*<button type="button" class="">Save changes</button>*@
            </div>
        </div>
    </div>
</div>



<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script type="text/javascript">
    //-------------------confirmation------------------------\\
    var request_id = -1;
    function viewConfirmation(reqID, desc, paid) {
        document.getElementById("confirm_").style.display = "block";
        document.getElementById("Description_").value = desc;
        document.getElementById("Paid_").value = paid;
        document.getElementById("id_").value = parseInt(reqID);
        request_id = parseInt(reqID);
    }

    //$('#buttConfirm').click(function () {
    //    if (request_id != -1) {

    //        var Code_ = $('#Code_').val(); // get the textbox value
    //        if (Code_ != "") {
    //            var url = http://localhost:49966/DeliveryMan/conFirmRecieving '?id=' + request_id + '&code=' + Code_; // build new url
    //            console.log(url);
    //            window.location.assign(url);

    //            //location.href = url; // redirect
    //            document.getElementById("confirm_").style.display = "none";
    //            return false; // cancel default redirect
    //        }
    //        else
    //            alert("Enter Confirmation Code plz!");
    //    }
    //});

    var current_location = "";

    var source = "";
    var destination = "";
    function setMap(elem) {
        request_id = $(elem).data('assigned-id');
        sessionStorage.setItem("request_id", request_id);
        var R_ID = { id: request_id }
        console.log("request_id => " + R_ID.id);
        $.ajax({

            type: "GET",
            url: "/../NormalCustomer/getjourneyInfo",
            data: R_ID,
            success: function (response) {
                // current_location = response.journy.current_loc;
                //source = response.journy.source;
                //destination = response.journy.destination;
                sessionStorage.setItem("current_location", response.journy.current_loc);
                sessionStorage.setItem("source", response.journy.source);
                sessionStorage.setItem("destination", response.journy.destination);
                //console.log("current_location : " + sessionStorage.getItem("current_location") + " sessionStorage.length : " + sessionStorage.length);
                //console.log("current_location : " + current_location + " source : " + source + " destination: " + destination);
            }

        })
        setTimeout(function () {

            if (sessionStorage.length > 1) {
                current_location = sessionStorage.getItem("current_location");
                source = sessionStorage.getItem("source");
                destination = sessionStorage.getItem("destination");
                document.getElementById("tracked_map").style.display = "block";
                document.getElementById("popupWindow").style.display = "block";
                initMap();

            }
        }, 2000);

        // console.log("current_location : " + current_location + " source : " + source + " destination: " + destination);


    }

    function initMap() {
        var service = new google.maps.DistanceMatrixService();
        var infoWindow = new google.maps.InfoWindow;
        var geocoder = new google.maps.Geocoder;

        var marker = "";
        var map = new google.maps.Map(document.getElementById('tracked_map'), {

            zoom: 16,
            mapTypeId: 'roadmap'
        });
        if (sessionStorage.length > 2) {
            //console.log("From INITMAP => current_location : " + current_location + " source : " + source + " destination: " + destination);
            var service = new google.maps.DistanceMatrixService();
            var directionsService = new google.maps.DirectionsService();
            var directionsDisplay = new google.maps.DirectionsRenderer();
            var latlngStr1 = source.split(',');
            var latlngStr2 = destination.split(',');
            var current_latlngStr = current_location.split(',');
            var latlng1 = { lat: parseFloat(latlngStr1[0]), lng: parseFloat(latlngStr1[1]) };
            var latlng2 = { lat: parseFloat(latlngStr2[0]), lng: parseFloat(latlngStr2[1]) };
            var current_latlng = { lat: parseFloat(current_latlngStr[0]), lng: parseFloat(current_latlngStr[1]) };
            // var current_latlng = new google.maps.LatLng(parseFloat(current_latlngStr[0]), parseFloat(current_latlngStr[1]));

            //  map.panTo(current_latlng);
            // map.setZoom(20);
            map.setCenter(current_latlng);


            directionsDisplay.setMap(map);
            var request = {
                origin: latlng1,
                destination: latlng2,
                travelMode: google.maps.TravelMode.DRIVING

            };
            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                }
            });
            marker = new google.maps.Marker({
                position: current_latlng,
                map: map,
                animation: google.maps.Animation.BOUNCE,
                icon: "/../delivery.png"

            });
            // service to get the remaining time & distance to the destination
            service.getDistanceMatrix({
                origins: [current_latlng],
                destinations: [latlng2],
                travelMode: google.maps.TravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.METRIC,
                avoidHighways: false,
                avoidTolls: false
            }, function (response, status) {
                if (status == google.maps.DistanceMatrixStatus.OK &&
                              response.rows[0].elements[0].status != "ZERO_RESULTS") {
                    var distance = response.rows[0].elements[0].distance.value;
                    distance = distance / 1000;
                    var duration = response.rows[0].elements[0].duration.value;
                    duration = parseFloat(duration / 60).toFixed(2);

                    document.getElementById("_calculatedDistance").value = distance + " km";
                    document.getElementById("__deliveryTime").value = duration + " minutes";

                }
            });
            // geocoder to get the name of current location
            geocoder.geocode({ 'location': current_latlng }, function (results, status) {
                if (status === 'OK') {
                    if (results[0]) {

                        document.getElementById("_currentLocation").value = results[0].formatted_address;

                    } else {
                        console.log('No results found');
                    }
                } else {
                    console.log('Geocoder failed due to: ' + status);
                }
            });
            if (navigator.geolocation) {
                setInterval(function () { success(map, marker, service, geocoder, latlng2); }, 60000);
            }


            // map.setCenter(latlng2);
        } else {

        }

    }


    function success(map, marker, service, geocoder, destination) {
        var pos = "";
        navigator.geolocation.getCurrentPosition(function (position) {
             pos = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };

            //infoWindow.setPosition(pos);

            map.setCenter(pos);
            // alert(pos.lat)
        }, function () {
        
            var tryAPIGeolocation = function () {
                jQuery.post("https://www.googleapis.com/geolocation/v1/geolocate?key=AIzaSyDohzVGcA6LnOTCA9doBW0fR8oWMVwxHAE", function (success) {
                    pos = {
                        lat: success.location.lat,
                        lng: success.location.lng
                    };
                    sessionStorage.setItem('pos', JSON.stringify(pos));
                    //  apiGeolocationSuccess({ coords: { latitude: success.location.lat, longitude: success.location.lng } });
                })
              .fail(function (err) {
                  alert("API Geolocation error! \n\n" + err);
              });
            };

            tryAPIGeolocation();

        });
        var coords = sessionStorage.getItem('pos');
        pos = $.parseJSON(coords);
       // map.setCenter(pos);
        if (pos != "") {

               console.log("current_location : " + current_location + " new_current_location : " + sessionStorage.getItem("new_current_location"));

            var current_latlng = pos;
            // var current_latlng = new google.maps.LatLng(parseFloat(current_latlngStr[0]), parseFloat(current_latlngStr[1]));

            marker.setPosition(current_latlng);
            map.setCenter(current_latlng);

            //   map.panTo(current_latlng);
            // service to get the remaining time & distance to the destination
            service.getDistanceMatrix({
                origins: [current_latlng],
                destinations: [destination],
                travelMode: google.maps.TravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.METRIC,
                avoidHighways: false,
                avoidTolls: false
            }, function (response, status) {
                if (status == google.maps.DistanceMatrixStatus.OK &&
                              response.rows[0].elements[0].status != "ZERO_RESULTS") {
                    var distance = response.rows[0].elements[0].distance.value;
                    distance = distance / 1000;
                    var duration = response.rows[0].elements[0].duration.value;
                    duration = parseFloat(duration / 60).toFixed(2);

                    document.getElementById("_calculatedDistance").value = distance + " km";
                    document.getElementById("__deliveryTime").value = duration + " minutes";

                }
            });
            // geocoder to get the name of current location
            geocoder.geocode({ 'location': current_latlng }, function (results, status) {
                if (status === 'OK') {
                    if (results[0]) {

                        document.getElementById("_currentLocation").value = results[0].formatted_address;

                    } else {
                        console.log('No results found');
                    }
                } else {
                    console.log('Geocoder failed due to: ' + status);
                }
            });


        }

    }

    // setInterval(function () { success(d); }, 20000);
    /*
       1-key1  AIzaSyARZj829jcIqy8ik7UKOwIT_CynjqIe4e0
       2-key2  AIzaSyDohzVGcA6LnOTCA9doBW0fR8oWMVwxHAE

       */
    function updateLocation() {
        var tryAPIGeolocation = function () {
            jQuery.post("https://www.googleapis.com/geolocation/v1/geolocate?key=AIzaSyDohzVGcA6LnOTCA9doBW0fR8oWMVwxHAE", function (success) {

                var currentLocation = { location: success.location.lat + "," + success.location.lng }
               // alert("error : " + currentLocation.location);
                $.ajax({

                    type: "POST",
                    url: "/../DeliveryMan/updateLocation",
                    data: currentLocation,
                    success: function (response) {

                        //alert("you are done : " + response);
                    }

                })
                //  apiGeolocationSuccess({ coords: { latitude: success.location.lat, longitude: success.location.lng } });
            })
          .fail(function (err) {
              alert("API Geolocation error! \n\n" + err);
          });
        };

        tryAPIGeolocation();
    }

    function error(err) {
     
    }
    
    setInterval(updateLocation, 20000);
    

</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDohzVGcA6LnOTCA9doBW0fR8oWMVwxHAE&libraries=places&callback=initMap"></script>

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="~/Scripts/jquery-3.2.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>


@section scripts {
    <!--will not reffenced as it alreed on layout -->
    <!--<script src="~/Scripts/jquery-3.2.1.min.js"></script> -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.3.min.js"></script>
    <script type="text/javascript"> var MyType = '@Session["userType"]';</script>
    <script type="text/javascript"> var Myuser_name = '@Session["userName"]';</script>
    <script type="text/javascript" src="~/Scripts/SignalR_AllViews.js"></script>
}