@model SmartDelivery.Models.Order

@{
    ViewBag.Title = "Edit Order";
    Layout = "~/Views/Shared/_normalcustomerLayout.cshtml";
}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<link rel="stylesheet" href="~/Content/Request_Delivery.CSS" />
<script type="text/javascript">


    function initAutocomplete() {

        var geocoder = new google.maps.Geocoder;
        if (document.getElementById("confirmDestination").checked == true) {
            var destinationName = $('#_destination').val();
            document.getElementById("_currentLocation").disabled = true;
            document.getElementById("Destination").style.display = "none";
            document.getElementById("To").style.display = "block";


            var latlngStr = destinationName.split(',');

            var latlng = { lat: parseFloat(latlngStr[0]), lng: parseFloat(latlngStr[1]) };
            geocoder.geocode({ 'location': latlng }, function (results, status) {
                if (status === 'OK') {
                    if (results[0]) {

                        document.getElementById("_to").value = results[0].formatted_address;

                    } else {
                        window.alert('No results found');
                    }
                } else {
                    window.alert('Geocoder failed due to: ' + status);
                }
            });


        }
        else {

            var infoWindow = new google.maps.InfoWindow;
            infoWindow.setContent("---drag me to the End Point.");
            var marker = "";
            var map = new google.maps.Map(document.getElementById('map'), {

                zoom: 16,
                mapTypeId: 'roadmap'
            });
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    map.setCenter(pos);
                    // alert(pos.lat)
                }, function () {
                    var apiGeolocationSuccess = function (position) {

                        var pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };

                        map.setCenter(pos);
                        //alert("API geolocation success!\n\nlat = " + position.coords.latitude + "\nlng = " + position.coords.longitude);
                    };
                    var tryAPIGeolocation = function () {
                        jQuery.post("https://www.googleapis.com/geolocation/v1/geolocate?key=AIzaSyDohzVGcA6LnOTCA9doBW0fR8oWMVwxHAE", function (success) {
                            apiGeolocationSuccess({ coords: { latitude: success.location.lat, longitude: success.location.lng } });
                        })
                      .fail(function (err) {
                          alert("API Geolocation error! \n\n" + err);
                      });
                    };

                    tryAPIGeolocation();
                });
            }

            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
            });
            // adds an event listener for the map, and creates a marker when the user clicks on the map at the clicked location.
            var counter = 0;
            map.addListener('click', function (e) {
                if (counter < 1) {
                    marker = new google.maps.Marker({
                        position: e.latLng,
                        map: map,
                        animation: google.maps.Animation.BOUNCE,
                        draggable: true
                    });
                    map.panTo(e.latLng);
                    infoWindow.open(map, marker);
                    $('#_destination').val(marker.getPosition().lat() + "," + marker.getPosition().lng());
                    counter++;
                }
                google.maps.event.addListener(marker, 'dragend', function () {
                    var x = marker.getPosition().lat();
                    var y = marker.getPosition().lng();

                    $('#_destination').val(x + "," + y);
                });
            });


            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                var bounds = new google.maps.LatLngBounds();
                places.forEach(function (place) {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }

                    marker = new google.maps.Marker({
                        map: map,
                        title: place.name,
                        position: place.geometry.location,
                        animation: google.maps.Animation.BOUNCE,
                        draggable: true
                    });

                    infoWindow.open(map, marker);

                    if (place.geometry.viewport) {

                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });

                google.maps.event.addListener(marker, 'dragend', function () {
                    var x = marker.getPosition().lat();
                    var y = marker.getPosition().lng();
                    $('#_destination').val(x + "," + y);
                });

                map.fitBounds(bounds);
            });
        }

    }//end initAuto

    function setCurrentLocation(value) {
        var index = value;
        if (value != 0 && navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };

                if (value == 1) {
                    $('#_destination').val(pos.lat + "," + pos.lng);
                }


            }, function () {
                var apiGeolocationSuccess = function (position) {

                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    if (value == 1) {
                        $('#_destination').val(pos.lat + "," + pos.lng);
                    }
                    //alert("API geolocation success!\n\nlat = " + position.coords.latitude + "\nlng = " + position.coords.longitude);
                };
                var tryAPIGeolocation = function () {
                    jQuery.post("https://www.googleapis.com/geolocation/v1/geolocate?key=AIzaSyDohzVGcA6LnOTCA9doBW0fR8oWMVwxHAE", function (success) {
                        apiGeolocationSuccess({ coords: { latitude: success.location.lat, longitude: success.location.lng } });
                    })
                  .fail(function (err) {
                      alert("API Geolocation error! \n\n" + err);
                  });
                };

                tryAPIGeolocation();
            });
        }

    }// end setCurrentLocation
</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyARZj829jcIqy8ik7UKOwIT_CynjqIe4e0&libraries=places&callback=initAutocomplete"></script>
<h2 class="text-center">Edit Order</h2>
<hr />
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal info-section col-sm-6">
       
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)
        @Html.HiddenFor(model => model.CustomerID)
        @Html.HiddenFor(model => model.OfferId)
        @Html.HiddenFor(model => model.TotalPrice)
        @Html.HiddenFor(model => model.StatusId)

        <div class="form-group">
            @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { type = "number", min = "1", max = "100", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-4">Set Current Location as </label>
            <div class="col-md-8">
                <select class="form-control" id="_currentLocation" onchange="setCurrentLocation(this.value)">
                    <option value="0">No I will use Map</option>

                    <option value="1">End Point</option>
                </select>
            </div>

        </div>

        <div class="form-group" id="Destination">
            @Html.LabelFor(model => model.Destination, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Destination, new { htmlAttributes = new { @id = "_destination", @class = "form-control", @readonly = "readonly" } })
                <input type="checkbox" id="confirmDestination" onclick="initAutocomplete()"> confirm End Point.
                @Html.ValidationMessageFor(model => model.Destination, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group" id="To" style="display:none">
            <label class="control-label col-md-4">To </label>
            <div class="col-md-8">
                <input id="_to" , class="form-control" readonly />

            </div>
        </div>
        <div class="form-group">
            <div class="col-md-12">
                <input type="submit" value="Save" class="btn" />
            </div>
        </div>
    </div>
}

<div class="map-section col-sm-6">
    <input id="pac-input" type="text" placeholder="ادخل مكان وجهة الطلبات">
    <div id="map" class="map"></div>
</div>

@section scripts {
    <!--will not reffenced as it alreed on layout -->
    <!--<script src="~/Scripts/jquery-3.2.1.min.js"></script> -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.3.min.js"></script>
    <script type="text/javascript"> var MyType = '@Session["userType"]';</script>
    <script type="text/javascript"> var Myuser_name = '@Session["userName"]';</script>
    <script type="text/javascript" src="~/Scripts/SignalR_AllViews.js"></script>
}